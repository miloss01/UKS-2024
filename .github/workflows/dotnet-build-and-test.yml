name: Build And Test .NET

on:
  workflow_call:

jobs:
  build-and-test:

    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: uks-database
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U admin" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
          
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Wait for PostgreSQL
      run: |
        for i in {1..10}; do
          nc -zv localhost 5432 && break
          echo "Waiting for PostgreSQL..."
          sleep 5
        done      
    - name: Create and clone test database
      env:
        PGPASSWORD: admin
      run: |
        echo "Creating test-uks-database..."
        psql -h localhost -U admin -d postgres -c "CREATE DATABASE \"test-uks-database\";"
        echo "Cloning uks-database to test-uks-database..."
        pg_dump -h localhost -U admin -d uks-database | psql -h localhost -U admin -d test-uks-database
    - name: Restore dependencies for default project
      run: dotnet restore ./DockerHubBackend/DockerHubBackend
    - name: Restore dependencies for test project
      run: dotnet restore ./DockerHubBackend/DockerHubBackend.Tests
    - name: Build default project
      run: dotnet build ./DockerHubBackend/DockerHubBackend --no-restore
    - name: Run tests with coverage
      run: |
        dotnet test ./DockerHubBackend/DockerHubBackend.Tests \
          --verbosity normal \
          --logger "trx;LogFileName=TestResults.trx" \
          /p:CollectCoverage=true \
          /p:CoverletOutputFormat=cobertura \
          /p:CoverletOutput=./TestResults/coverage.xml
    - name: Upload test results and coverage report
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          ./DockerHubBackend/DockerHubBackend.Tests/TestResults.trx
          ./DockerHubBackend/DockerHubBackend.Tests/TestResults/coverage.xml
    - name: Download test-results artifact
      uses: actions/download-artifact@v4
      with:
        name: test-results # Matches the artifact name from your build-and-test step
        path: test-results # Download to a directory named 'test-results'

    - name: Locate Coverage XML
      id: locate_coverage
      run: |
        # Find the coverage.xml file within the downloaded artifact
        COVERAGE_FILE=$(find test-results -name "coverage.xml" | head -n 1)
        if [ -z "$COVERAGE_FILE" ]; then
          echo "::error::coverage.xml not found in artifact!"
          exit 1
        fi
        echo "Found coverage.xml at: $COVERAGE_FILE"
        echo "COVERAGE_FILE=$COVERAGE_FILE" >> "$GITHUB_OUTPUT"

    - name: Install ReportGenerator
      run: |
        dotnet tool install -g ReportGenerator

    - name: Generate Coverage Report Summary (Markdown)
      run: |
        reportgenerator "-reports:${{ steps.locate_coverage.outputs.COVERAGE_FILE }}" "-targetdir:coverage-report" "-reporttypes:MarkdownSummary"
      # This will create a file like 'coverage-report/Summary.md'

    - name: Read Coverage Summary into Variable
      id: coverage_summary
      run: |
        SUMMARY_CONTENT=$(cat coverage-report/Summary.md)
        # Escape multiline string for GitHub Actions output
        # This creates a multiline output variable
        echo "coverage_markdown<<EOF" >> $GITHUB_OUTPUT
        echo "$SUMMARY_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Comment Test and Coverage Summary on PR
      uses: peter-evans/create-or-update-comment@v4
      if: github.event_name == 'pull_request' # Only comment on PRs
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ### Test Results Summary
          - Passed tests: ${{ steps.summary.outputs.passed }} # Keep if you have these outputs from somewhere else
          - Failed tests: ${{ steps.summary.outputs.failed }} # Adjust as needed

          ### Code Coverage Report
          ${{ steps.coverage_summary.outputs.coverage_markdown }}  
      