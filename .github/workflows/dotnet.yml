# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  workflow_dispatch:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:

    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
          POSTGRES_DB: uks-database
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U admin" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
          
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Wait for PostgreSQL
      run: |
        for i in {1..10}; do
          nc -zv localhost 5432 && break
          echo "Waiting for PostgreSQL..."
          sleep 5
        done      
    - name: Create and clone test database
      env:
        PGPASSWORD: admin
      run: |
        echo "Creating test-uks-database..."
        psql -h localhost -U admin -d postgres -c "CREATE DATABASE \"test-uks-database\";"
        echo "Cloning uks-database to test-uks-database..."
        pg_dump -h localhost -U admin -d uks-database | psql -h localhost -U admin -d test-uks-database
    - name: Restore dependencies for default project
      run: dotnet restore ./DockerHubBackend/DockerHubBackend
    - name: Restore dependencies for test project
      run: dotnet restore ./DockerHubBackend/DockerHubBackend.Tests
    - name: Build default project
      run: dotnet build ./DockerHubBackend/DockerHubBackend --no-restore
    - name: Run tests
      run: dotnet test ./DockerHubBackend/DockerHubBackend.Tests --verbosity normal --logger "trx;LogFileName=TestResults.trx"
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: TestResults
        path: "**/*.trx"
    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
    - name: Generate HTML report
      run: reportgenerator -reports:**/*.trx -targetdir:TestReport
    - name: Upload HTML report
      uses: actions/upload-artifact@v4
      with:
        name: TestReport
        path: TestReport        


      
